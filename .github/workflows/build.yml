name: Build and Test

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [ created ]

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        go: ['1.22']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Run tests
      env:
        CI: true
        TERM: xterm
      shell: bash
      run: go test -v -race -coverprofile=coverage.out -covermode=atomic ./...

    - name: Upload coverage
      uses: codecov/codecov-action@v4
      if: matrix.os == 'ubuntu-latest' && matrix.go == '1.21'
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  build:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: test
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            output: sterm-linux-amd64
          - os: windows-latest
            goos: windows
            goarch: amd64
            output: sterm-windows-amd64.exe
          - os: macos-latest
            goos: darwin
            goarch: amd64
            output: sterm-darwin-amd64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'

    - name: Build
      run: go build -o build/${{ matrix.output }} .

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: binary-${{ matrix.os }}
        path: build/

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: build/
        pattern: binary-*
        merge-multiple: true

    - name: Create release archives
      run: |
        VERSION=${{ github.event.release.tag_name }}
        mkdir -p releases

        # Package Windows releases
        cd build
        zip ../releases/sterm-${VERSION}-windows-amd64.zip sterm-windows-amd64.exe
        zip ../releases/sterm-${VERSION}-windows-386.zip sterm-windows-386.exe

        # Package Linux releases
        tar -czf ../releases/sterm-${VERSION}-linux-amd64.tar.gz sterm-linux-amd64
        tar -czf ../releases/sterm-${VERSION}-linux-arm64.tar.gz sterm-linux-arm64
        tar -czf ../releases/sterm-${VERSION}-linux-arm.tar.gz sterm-linux-arm

        # Package macOS releases
        tar -czf ../releases/sterm-${VERSION}-darwin-amd64.tar.gz sterm-darwin-amd64
        tar -czf ../releases/sterm-${VERSION}-darwin-arm64.tar.gz sterm-darwin-arm64

        cd ..

        # Create checksums
        cd releases
        sha256sum * > checksums.txt

    - name: Upload release assets
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');

          const releaseId = context.payload.release.id;
          const releasesDir = 'releases';

          const files = fs.readdirSync(releasesDir);

          for (const file of files) {
            const filePath = path.join(releasesDir, file);
            const fileContent = fs.readFileSync(filePath);

            await github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: releaseId,
              name: file,
              data: fileContent
            });
          }